import express from 'express';
import User from '../models/User.js';
import { verifyToken } from '../middleware/auth.js';
import multer from 'multer';
import cloudinary from '../utils/cloudinary.js';

const router = express.Router();

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞–º‚Äô—è—Ç–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è multer
const storage = multer.memoryStorage();
const upload = multer({ storage });

// üîπ PUT: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.put('/username', verifyToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const { username } = req.body;

    if (!username) {
      return res.status(400).json({ message: '–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ' });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    user.username = username;
    await user.save();

    res.json({ message: '–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ', username: user.username });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üîπ POST: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞
router.post('/avatar', verifyToken, upload.single('avatar'), async (req, res) => {
  try {
    const userId = req.user.userId;

    if (!req.file) {
      return res.status(400).json({ message: '–§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ' });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const stream = cloudinary.uploader.upload_stream(
      {
        folder: 'avatars',
        resource_type: 'image',
        public_id: `user_${userId}_${Date.now()}`,
        overwrite: true,
      },
      async (error, result) => {
        if (error) {
          console.error('Cloudinary error:', error);
          return res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞' });
        }

        user.avatarUrl = result.secure_url;
        await user.save();

        res.json({ message: '–ê–≤–∞—Ç–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ', avatarUrl: user.avatarUrl });
      }
    );

    stream.end(req.file.buffer);
  } catch (err) {
    console.error('Server error:', err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
